name: Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'App version (e.g., 1.0.0). Leave blank to use build.gradle versionName.'
        required: false
      tag:
        description: 'Release tag (e.g., v1.0.0). Leave blank to use version.'
        required: false
      upload_to_release:
        description: 'Upload APK to GitHub Release? (true/false)'
        required: true
        default: 'true'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Sign with debug key
      run: |
        sed -i "19i signingConfig signingConfigs.debug" ./app/build.gradle
        curl -s https://raw.githubusercontent.com/artem-zinnatullin/RxJavaProGuardRules/master/rxjava-proguard-rules/proguard-rules.txt >> ./app/proguard-rules.pro
        cat ./app/proguard-rules.pro

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build --stacktrace

    - name: Build debug APK
      run: ./gradlew assembleDebug --stacktrace

    - name: Get App Version Name
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION_NAME="${{ github.event.inputs.version }}"
        else
          VERSION_NAME=$(grep versionName app/build.gradle | sed -n 's/.*versionName \"\([0-9.]*\)\".*/\1/p')
        fi
        TAG_NAME="${{ github.event.inputs.tag }}"
        [ -z "$TAG_NAME" ] && TAG_NAME="v$VERSION_NAME"
        echo "APP_VERSION=$VERSION_NAME" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "Using version: $VERSION_NAME, tag: $TAG_NAME"

    - name: Rename APK
      run: |
        APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
        NEW_APK_NAME="game-unlocker-v${{ env.APP_VERSION }}.apk"
        if [ -f "$APK_PATH" ]; then
          mv "$APK_PATH" "$NEW_APK_NAME"
          echo "Renamed APK to $NEW_APK_NAME"
        else
          echo "Error: APK not found at $APK_PATH"
          exit 1
        fi

    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Game-Unlocker-v${{ env.APP_VERSION }}
        path: game-unlocker-v${{ env.APP_VERSION }}.apk

    - name: Create and Upload Release
      if: ${{ github.event.inputs.upload_to_release == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        APK_FILE="game-unlocker-v${{ env.APP_VERSION }}.apk"
        if [ ! -f "$APK_FILE" ]; then
          echo "Error: APK file $APK_FILE not found!"
          exit 1
        fi
        # Ensure title and asset name are properly quoted and formatted
        gh release create "${{ env.TAG_NAME }}" \
          --title "Game Unlocker v${{ env.APP_VERSION }}" \
          --generate-notes \
          --prerelease \
          "$APK_FILE:game-unlocker-v${{ env.APP_VERSION }}.apk"
        echo "Release created with tag ${{ env.TAG_NAME }}"
      shell: bash
